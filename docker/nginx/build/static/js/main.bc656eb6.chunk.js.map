{"version":3,"sources":["components/ViewForms/ViewForms.jsx","components/Message/Message.jsx","components/FormCreate/FormCreate.jsx","components/FormSubmission/FormSubmission.jsx","components/FormSubmissionList/FormSubmissionLIst.jsx","components/AppBar/AppBar.jsx","App.js","serviceWorker.js","index.js"],"names":["ViewForm","state","formList","_this2","this","props","changeTitle","axios","get","then","res","console","log","setState","data","catch","err","react_default","a","createElement","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","_id","component","scope","name","numSubmissions","react_router_dom","to","Component","Message","show","error","Typography","color","variant","errorMsg","successMsg","React","fieldTypes","FormCreate","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hasName","selectedType","form","submited","submitErr","fieldItems","createMenuItems","Box","width","Paper","m","p","onSubmit","event","addField","Grid","container","spacing","item","xs","FormControl","fullWidth","TextField","id","label","value","required","onChange","handleFormName","FormHelperText","gutterBottom","InputLabel","htmlFor","Select","handleTypeChange","target","autoWidth","input","Input","Button","type","buildDemoForm","ButtonGroup","aria-label","onClick","createForm","cleanForm","components_Message_Message","fieldTypesList","MenuItem","preventDefault","FormData","push","field","concat","_this3","fields","post","response","FormSubmission","formFields","formId","handleSubmit","buildFormFields","shrink","_this4","maxWidth","buildInputLabel","_this5","jsonForm","forEach","submission","FormSubmissionList","inputList","submissionList","submissions","rowNum","AdapterLink","forwardRef","ref","assign","innerRef","TitleAppBar","classes","className","root","AppBar","position","Toolbar","title","withStyles","flexGrow","marginBottom","menuButton","marginRight","App","AppBar_AppBar","react_router","path","exact","render","ViewForms","components_FormCreate_FormCreate","_ref","match","components_FormSubmission_FormSubmission","params","_ref2","FormSubmissionLIst","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc656eb6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nclass ViewForm extends Component {\n  /*\n  a component to show list of forms\n  props: none\n  */\n  state = {\n    formList: [] // list of forms\n  };\n\n  componentWillMount() {\n    this.props.changeTitle(\"View Forms\");\n    // get form list\n    axios\n      .get(\"/api/form/list\")\n      .then(res => {\n        console.log(res);\n        this.setState({ formList: res.data });\n      })\n      .catch(err => {\n        console.log(\"error fetching data\");\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Form ID</TableCell>\n              <TableCell align=\"center\">Form name</TableCell>\n              <TableCell align=\"center\"># Submissions</TableCell>\n              <TableCell align=\"center\"> Submit Page</TableCell>\n              <TableCell align=\"center\">Submissions Page</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.formList.map(row => (\n              <TableRow key={row._id}>\n                <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                  {row._id}\n                </TableCell>\n                <TableCell align=\"center\">{row.name}</TableCell>\n                <TableCell align=\"center\">{row.numSubmissions}</TableCell>\n                <TableCell align=\"center\">\n                  <Link to={\"/submit_form/\" + row._id}>View</Link>\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Link to={\"/form_submission_list/\" + row._id}>View</Link>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default ViewForm;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass Message extends React.Component {\n  /*\n  component to show message\n  props:\n    show: show component or not\n    error: show error message if true otherwise show success message\n    errorMsg: the error message\n    successMsg: the success message\n  */\n  render() {\n    if (this.props.show) {\n      if (this.props.error)\n        return (\n          <Typography color=\"error\" variant=\"body1\">\n            {this.props.errorMsg}\n          </Typography>\n        );\n      else {\n        return (\n          <Typography color=\"primary\" variant=\"body1\">\n            {this.props.successMsg}\n          </Typography>\n        );\n      }\n    } else {\n      return <Typography />;\n    }\n  }\n}\n\nexport default Message;\n","import React, { Component } from \"react\";\nimport {\n  Paper,\n  Button,\n  ButtonGroup,\n  MenuItem,\n  Grid,\n  Typography,\n  Box\n} from \"@material-ui/core\";\nimport {\n  FormControl,\n  Select,\n  InputLabel,\n  Input,\n  TextField,\n  FormHelperText\n} from \"@material-ui/core\";\nimport Message from \"../Message/Message\";\nimport axios from \"axios\";\n\nconst fieldTypes = [\"text\", \"color\", \"date\", \"email\", \"tel\", \"number\"];\n\nclass FormCreate extends Component {\n  /*\n  A component to create new form\n  props: changeTitle: a function that changes the appbar title\n  */\n\n  state = {\n    hasName: false, // validation on form name\n    name: \"\", // form name\n    selectedType: fieldTypes[0], // selected type from select component\n    form: [], // list of fields in the form\n    submited: false, // was the form submited\n    submitErr: \"\" // error message when submited\n  };\n\n  constructor(props) {\n    super(props);\n    this.fieldItems = this.createMenuItems(fieldTypes);\n  }\n\n  componentWillMount() {\n    this.props.changeTitle(\"Form Create\");\n  }\n\n  render() {\n    return (\n      <div align=\"center\">\n        <Box width=\"80%\">\n          <Paper>\n            <Box m={2} p={2}>\n              <form onSubmit={event => this.addField(event)}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <FormControl fullWidth={true} error={!this.state.hasName}>\n                      <TextField\n                        id=\"name\"\n                        name=\"name\"\n                        label=\"Form Name\"\n                        value={this.state.name}\n                        error={!this.state.hasName}\n                        required\n                        onChange={event => this.handleFormName(event)}\n                      />\n                      <FormHelperText error={!this.state.hasName} required>\n                        Required\n                      </FormHelperText>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Add fields\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={8}>\n                    <FormControl fullWidth={true}>\n                      <TextField\n                        required\n                        id=\"field_name\"\n                        name=\"field_name\"\n                        label=\"Name\"\n                      />\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={2}>\n                    <FormControl fullWidth={true}>\n                      <InputLabel htmlFor=\"type\">Field type</InputLabel>\n                      <Select\n                        name=\"field\"\n                        id=\"type\"\n                        value={this.state.selectedType}\n                        onChange={event =>\n                          this.handleTypeChange(event.target.value)\n                        }\n                        autoWidth={true}\n                        input={<Input name=\"type\" />}\n                      >\n                        {this.fieldItems}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={2}>\n                    <Button variant=\"contained\" type=\"submit\">\n                      Add\n                    </Button>\n                  </Grid>\n                </Grid>\n              </form>\n            </Box>\n          </Paper>\n          <Paper>{this.buildDemoForm()}</Paper>\n          <ButtonGroup\n            fullWidth\n            aria-label=\"Full width outlined button group\"\n            type=\"button\"\n          >\n            <Button onClick={() => this.createForm()}>Create</Button>\n            <Button onClick={() => this.cleanForm()}>Clean</Button>\n          </ButtonGroup>\n          <Message\n            show={this.state.submited}\n            error={this.state.submitErr !== \"\"}\n            errorMsg={this.state.submitErr}\n            successMsg=\"Form submited successfuly\"\n          />\n        </Box>\n      </div>\n    );\n  }\n\n  createMenuItems(fieldTypesList) {\n    // recive list of types (strings) and return list of Menu components\n    return fieldTypesList.map(type => (\n      <MenuItem value={type} key={type}>\n        {type}\n      </MenuItem>\n    ));\n  }\n\n  addField(event) {\n    // add new field to the form\n    event.preventDefault();\n    const data = new FormData(event.target);\n    let { form } = this.state;\n    form.push({ name: data.get(\"field_name\"), type: this.state.selectedType });\n    this.setState({ form: form });\n  }\n\n  buildDemoForm() {\n    // create demo of the result form\n    return (\n      <div>\n        <Typography variant=\"h6\" gutterBottom>\n          Form {this.state.name}\n        </Typography>\n        <Box width=\"60%\">\n          {this.state.form.map(field => {\n            return (\n              <Box key={`${field.name}`} width=\"100%\" p={2}>\n                <InputLabel>{field.name}: </InputLabel>\n                <Input fullWidth={true} type={field.type} name={field.name} />\n                <br />\n              </Box>\n            );\n          })}\n        </Box>\n      </div>\n    );\n  }\n\n  handleTypeChange(value) {\n    this.setState({ selectedType: value });\n  }\n\n  handleFormName(event) {\n    this.setState({\n      hasName: event.target.value !== \"\",\n      name: event.target.value\n    });\n  }\n\n  createForm() {\n    // post the new form\n    if (!this.state.hasName) return;\n\n    const data = {\n      name: this.state.name,\n      fields: this.state.form\n    };\n    axios\n      .post(\"/api/form\", data)\n      .then(res => {\n        this.setState({ submited: true, submitErr: \"\" });\n      })\n      .catch(error => {\n        let errorMsg;\n        if (error.response)\n          errorMsg = \"Failed to submit: \" + error.response.data;\n        else errorMsg = \"Failed to submit: unknown error\";\n        this.setState({ submited: true, submitErr: errorMsg });\n      });\n  }\n  cleanForm() {\n    // clean form name and fields\n    this.setState({ name: \"\", hasName: false, form: [] });\n  }\n}\n\nexport default FormCreate;\n","import React, { Component } from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\nimport { FormControl, InputLabel, Input, Button } from \"@material-ui/core\";\nimport Message from \"../Message/Message\";\nimport axios from \"axios\";\n\nclass FormSubmission extends Component {\n  /*\n  component to submit a form\n  props: formId: the id number of the form\n  */\n\n  state = {\n    formFields: [], // the form fields\n    submited: false, // was the form submited\n    submitErr: \"\" // submit error if any\n  };\n\n  constructor(props) {\n    super(props);\n    this.formId = this.props.formId;\n  }\n  componentWillMount() {\n    // get form data\n    axios\n      .get(`/api/form?id=${this.formId}`)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          formFields: res.data.formFields,\n          submited: false,\n          submitErr: \"\"\n        });\n        this.props.changeTitle(`Form ${res.data.name} Submission`);\n      })\n      .catch(err => {\n        console.log(err);\n        console.log(\"error fetching data\");\n      });\n  }\n\n  render() {\n    return (\n      <div align=\"center\">\n        <Box width=\"80%\">\n          <Paper>\n            <Box p={2} m={2}>\n              <form onSubmit={event => this.handleSubmit(event)}>\n                {this.buildFormFields()}\n                <Button type=\"submit\">Submit</Button>\n                <Message\n                  show={this.state.submited}\n                  error={this.state.submitErr !== \"\"}\n                  errorMsg={this.state.submitErr}\n                  successMsg=\"Form submited successfuly\"\n                />\n              </form>\n            </Box>\n          </Paper>\n        </Box>\n      </div>\n    );\n  }\n\n  buildInputLabel(field) {\n    if (field.type === \"date\")\n      return <InputLabel shrink>{field.name}</InputLabel>;\n    else return <InputLabel>{field.name}</InputLabel>;\n  }\n  buildFormFields() {\n    // build the form to submit\n    return (\n      <Box width=\"60%\" maxWidth=\"600px\">\n        {this.state.formFields.map(field => (\n          <FormControl key={`${field.name}`} fullWidth={true}>\n            {this.buildInputLabel(field)}\n            <Input type={field.type} name={field.name} />\n          </FormControl>\n        ))}\n      </Box>\n    );\n  }\n\n  handleSubmit(event) {\n    // handle submission of the form\n    event.preventDefault();\n    const data = new FormData(event.target);\n    let jsonForm = {};\n    data.forEach((value, key) => {\n      jsonForm[key] = value;\n    });\n\n    // post form to server\n    axios\n      .post(\"/api/form/submit\", {\n        id: this.formId,\n        submission: jsonForm\n      })\n      .then(res => this.setState({ submited: true, submitErr: \"\" }))\n      .catch(error => {\n        let errorMsg;\n        if (error.response)\n          errorMsg = \"Failed to submit: \" + error.response.data;\n        else errorMsg = \"Failed to submit: unknown error\";\n        this.setState({ submited: true, submitErr: errorMsg });\n      });\n  }\n}\n\nexport default FormSubmission;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n} from \"@material-ui/core\";\n\nclass FormSubmissionList extends Component {\n  /*\n  component to view list of form submissions\n  props: formId: the id of the form\n  */\n  state = {\n    inputList: [], // list of form fields\n    submissionList: [] // list of submissions\n  };\n  constructor(props) {\n    super(props);\n    this.formId = this.props.formId;\n  }\n\n  componentWillMount() {\n    // get form data\n    axios\n      .get(`/api/form?id=${this.formId}`)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          inputList: res.data.formFields,\n          submissionList: res.data.submissions\n        });\n        this.props.changeTitle(`Form ${res.data.name} submissions`);\n      })\n      .catch(err => {\n        console.log(\"error fetching data\");\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {this.state.inputList.map(field => (\n                <TableCell key={`${field.name}_head`} align=\"center\">\n                  {field.name}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.submissionList.map((row, rowNum) => (\n              <TableRow>\n                {this.state.inputList.map(field => (\n                  <TableCell key={`${field.name}_${rowNum}`} align=\"center\">\n                    {row[field.name]}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default FormSubmissionList;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Toolbar, Typography, Button } from \"@material-ui/core\";\n\nimport { Link } from \"react-router-dom\";\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    marginBottom: \"5px\"\n  },\n  menuButton: {\n    marginRight: 2\n  },\n  title: {\n    flexGrow: 1\n  }\n};\n\nconst AdapterLink = React.forwardRef((props, ref) => (\n  <Link innerRef={ref} {...props} />\n));\n\nclass TitleAppBar extends React.Component {\n  /*\n  An AppBar component, title recived from 'title' prop\n  props: title\n  */\n\n  constructor(props) {\n    super(props);\n    this.classes = props.classes;\n  }\n\n  render() {\n    return (\n      <div className={this.classes.root}>\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={this.classes.title}>\n              {this.props.title}\n            </Typography>\n\n            <Button color=\"default\" component={AdapterLink} to=\"/\">\n              View Forms\n            </Button>\n\n            <Button color=\"default\" component={AdapterLink} to=\"/create_form\">\n              Create Form\n            </Button>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(TitleAppBar);\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ViewForms from \"./components/ViewForms/ViewForms\";\nimport FormCreate from \"./components/FormCreate/FormCreate\";\nimport FormSubmission from \"./components/FormSubmission/FormSubmission\";\nimport FormSubmissionList from \"./components/FormSubmissionList/FormSubmissionLIst\";\nimport AppBar from \"./components/AppBar/AppBar\";\n\nclass App extends React.Component {\n  state = {\n    title: \"\"\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <AppBar title={this.state.title} />\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={() => (\n                <ViewForms changeTitle={title => this.changeTitle(title)} />\n              )}\n            />\n            <Route\n              path=\"/create_form\"\n              render={() => (\n                <FormCreate changeTitle={title => this.changeTitle(title)} />\n              )}\n            />\n            <Route\n              path=\"/submit_form/:id\"\n              render={({ match }) => (\n                <FormSubmission\n                  changeTitle={title => this.changeTitle(title)}\n                  formId={match.params.id}\n                />\n              )}\n            />\n            <Route\n              path=\"/form_submission_list/:id\"\n              render={({ match }) => (\n                <FormSubmissionList\n                  changeTitle={title => this.changeTitle(title)}\n                  formId={match.params.id}\n                />\n              )}\n            />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n\n  changeTitle(title) {\n    this.setState({ title: title });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}